package com.csse.transport.controller;

import com.csse.transport.model.Passenger;
import com.csse.transport.model.User;
import com.csse.transport.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import javax.validation.Valid;
import java.net.URI;
import java.util.Map;

@Controller  // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /sl-trans (after Application path)
public class UserController {

    @Autowired   // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @GetMapping(path="/add") //Map only get requests
    public @ResponseBody String addNewUser (@RequestParam String username, @RequestParam String password){

        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setUsername(username);
        n.setPassword(password);
//        userRepository.save(n);
        return "User Registered successfully";
    }

    @GetMapping(path="/all-users")
    public @ResponseBody Iterable<Passenger> getAllUsers(){
        //This returns a JSON or XML with the users
        return userRepository.findAll();
    }

//    @PostMapping("/create-user")
//        public String createUser(@RequestBody Map<String, String> body){
//
//        String username = body.get("username");
//        String password = body.get("password");
//        User n = new User();
//        n.setPassword(password);
//        n.setUsername(username);
//        userRepository.save(n);
//        return "user crated";
//    }

//    @PostMapping("create-user")
//    public ResponseEntity<Void> createUser(@RequestBody Map<String, String> body, UriComponentsBuilder builder) {
//        User n = new User();
//        String username = body.get("username");
//       String password = body.get("password");
//        n.setPassword(password);
//      n.setUsername(username);
//       userRepository.save(n);
//        boolean flag = articleService.addArticle(article);
//        if (flag == false) {
//            return new ResponseEntity<Void>(HttpStatus.CONFLICT);
//        }
//        HttpHeaders headers = new HttpHeaders();
//        headers.setLocation(builder.path("/article/{id}").buildAndExpand(article.getArticleId()).toUri());
//        return new ResponseEntity<Void>(headers, HttpStatus.CREATED);
//    }
    @PostMapping("/create-user")
    public ResponseEntity<Object> createStudent(@Valid @RequestBody User n) {
//        User n = new User();
//        String username = body.get("username");
//        String password = body.get("password");
//        n.setPassword(password);
//        n.setUsername(username);
//        userRepository.save(n);
//        URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
//                .buildAndExpand(n.getId()).toUri();
String message = "Successfull";
        return ResponseEntity
                .ok()
                .body(message);

    }
    @Transactional
    @PutMapping("/change_password")
    public ResponseEntity changePassword(@RequestBody Map<String, String> body){
        System.out.println("inside put");
        String message1 = "Password is not Chandged";
        try{
            String pid = body.get("pid");
            String password = body.get("password");
            int y = userRepository.changePassword(pid, password);
            System.out.println(y);
            if(y == 0){
                message1 = "Password is not Chandged";
            }
            message1 = "Password Changed";
        }catch (Exception ex){
            System.out.println(ex);
        }
         return ResponseEntity
                .ok()
                .body(message1);
    }

//    @PutMapping("/user-update/{id}")
//    public ResponseEntity<Object> updateStudent(@Valid @RequestBody User student, @PathVariable int id) {
//        Optional<Student> studentOptional = studentRepository.findById(id);
//        if (!studentOptional.isPresent())
//            return ResponseEntity.notFound().build();
//        student.setId(id);
//        userRepository.save(student);
//        return ResponseEntity.noContent().build();
//    }
}


//testing
//http://localhost:8080/sl-trans/add?username=nadun&password=112233
//http://localhost:8080/sl-trans/all-users